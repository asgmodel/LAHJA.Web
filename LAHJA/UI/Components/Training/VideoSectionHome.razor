

<MudTable Items="@Elements" Dense="true" Hover="true" Bordered="true" Striped="true" Filter="new Func<Invoice,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@GetLocalizedText("Periodic Elements", "الفاتوره")</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium"
                      Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>

        <MudTh>#</MudTh>
        <MudTh>@GetLocalizedText("Status", "الحالة")</MudTh>
        <MudTh>@GetLocalizedText("Client", "عميل")</MudTh>
        <MudTh>@GetLocalizedText("Total", "المجموع")</MudTh>
        <MudTh>@GetLocalizedText("Issue Date", "تاريخ الإصدار")</MudTh>
        <MudTh>@GetLocalizedText("Balance", "توازن")</MudTh>
        <MudTh>@GetLocalizedText("Actions", "الإجراءات")</MudTh>


    </HeaderContent>

    <RowTemplate>
        <MudTd>@context.Id</MudTd>
        <MudTd>@context.Status</MudTd>
        <MudTd>@context.Client</MudTd>
        <MudTd>@context.Total</MudTd>
        <MudTd>@context.Date</MudTd>
        <MudTd>@context.Balance</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Visibility" Color="Color.Primary" OnClick="@(()=>ViewInvoice(context.Id))" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() =>DeleteInvoice(context.Id))" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Value="hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Value="dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Value="striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Value="bordered" Color="Color.Warning">Bordered</MudSwitch>
    <MudSpacer />
    <div style="min-width:200px;">
        <MudText Class="align-self-center d-inline">Selected1: @selectedItem1?.Status</MudText>
    </div>
</div>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private Invoice selectedItem1 = null;
    private HashSet<Invoice> selectedItems = new HashSet<Invoice>();

    private IEnumerable<Invoice> Elements = new List<Invoice>();

    protected override async Task OnInitializedAsync()
    {
        Elements = invoices;
    }

    private bool FilterFunc1(Invoice element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Invoice element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Total.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private void ViewInvoice(int id)
    {

        Console.WriteLine($"Viewing invoice with ID: {id}");
    }

    private void DeleteInvoice(int id)
    {

        var invoice = invoices.FirstOrDefault(i => i.Id == id);
        if (invoice != null)
        {
            invoices.Remove(invoice);
        }
        StateHasChanged();
    }

    private List<Invoice> invoices = new()
    {

        new Invoice { Id = 5089, Status = "Paid", Client = "Charles Tuttle", Total = "3077 USD", Date = "May 2020", Balance = "0" },
        new Invoice { Id = 5041, Status = "Paid", Client = "Charles Tuttle", Total = "2230 USD", Date = "November 2020", Balance = "0" },
        new Invoice { Id = 5027, Status = "Paid", Client = "Charles Tuttle", Total = "2787 USD", Date = "September 2020", Balance = "0" }
    };

    private List<Invoice> paginatedInvoices;

    private async Task<TableData<Invoice>> LoadServerData(TableState state)
    {


        int skip = state.Page * state.PageSize;
        var data = invoices.Skip(skip).Take(state.PageSize).ToList();
        return new TableData<Invoice> { Items = data, TotalItems = invoices.Count };
    }



    private string GetLocalizedText(string englishText, string arabicText)
    {
        bool isArabic = true;
        return isArabic ? arabicText : englishText;
    }
    public class Invoice
    {
        public int Id { get; set; }
        public string Status { get; set; }
        public string Client { get; set; }
        public string Total { get; set; }
        public string Date { get; set; }
        public string Balance { get; set; }
    }

















}