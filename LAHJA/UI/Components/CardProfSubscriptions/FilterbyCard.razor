@typeparam TItem

@if (itemOptions != null && itemOptions.Any()) // التحقق من أن القائمة ليست فارغة
{
    <MudMenu Label="EndIcon" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.KeyboardArrowDown">
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.h6" Class="mud-width-full">
                @(GetPropertyValue(itemOptions.FirstOrDefault(), "TotalNumber") ?? "No Data") <!-- تصحيح استدعاء TotalNumber -->
            </MudText>

            <MudSelect T="TItem" @bind-Value="selectedItem" ToStringFunc="@(item => GetPropertyValue(item, "Name") ?? "Unknown")" Label="Select your item" Variant="Variant.Outlined" Clearable>
                @foreach (var item in itemOptions)
                {
                    <MudSelectItem Value="@item">@GetPropertyValue(item, "Name")</MudSelectItem>
                }
            </MudSelect>

            <MudDivider Class="my-2" />

            <MudStack Spacing="4">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" @onclick="OnPayNowClick">
                    @(GetPropertyValue(itemOptions.FirstOrDefault(), "ButtonLabel") ?? "Pay Now") <!-- تصحيح استدعاء ButtonLabel -->
                </MudButton>
            </MudStack>
        </MudPaper>
    </MudMenu>
}

@code {
    [Parameter] public List<TItem> itemOptions { get; set; } = new(); // جعل القائمة ديناميكية
    private TItem selectedItem;

    private string GetPropertyValue(TItem item, string propertyName)
    {
        if (item == null) return string.Empty;

        var propertyInfo = typeof(TItem).GetProperty(propertyName);
        return propertyInfo?.GetValue(item)?.ToString() ?? string.Empty;
    }

    private void OnPayNowClick()
    {
        if (selectedItem != null)
        {
            Console.WriteLine($"Paying for item: {GetPropertyValue(selectedItem, "Name")}");
        }
    }
}
