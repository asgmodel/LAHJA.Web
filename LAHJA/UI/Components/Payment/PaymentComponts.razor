@using Domain.ShareData
@using LAHJA.Data.UI.Components.Payment.DataBuildBillingBase
@using LAHJA.Data.UI.Components.Payment.CreditCard
@using LAHJA.Data.UI.Components.Plan
@using LAHJA.Helpers
@using LAHJA.Helpers.Services
@using LAHJA.Them
@using LAHJA.UI.Components.Billing.Shared
@using LAHJA.UI.Components.Payment.CreditCard
@using Microsoft.AspNetCore.Authorization
@using MudBlazor

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IManageLanguageService _manageLanguageService


@attribute [Authorize]


<MudPaper Style="height:100%">
    <MudStepper  Style="height:100%;overflow:hidden;padding:3%" NonLinear ShowResetButton OnPreviewInteraction="OnPreviewInteraction">
       <div style="height:100%">
            <MudStep Style="height:100%" CompletedStepColor="@AppColors.BASE_COLOR_ENUM" Title="Step 1" SecondaryText="Flip the switch">
            <div style="padding:0% 10%">
            <UpgradePlan BuildData="@BuildPlanData" SubmitConfirm="OnSubmitConfirmPlan" SubmitUpgrade="OnSubmitUpgradePlan" SubmitCancel="OnSubmitCancelPlan" />
            </div>
        </MudStep>

        <MudStep CompletedStepColor="@AppColors.BASE_COLOR_ENUM" Title="Step 2" SecondaryText="Enter some text" HasError="@(_step2TextInput=="")">
            <MudPaper Elevation="0" Class="w-100 container_flex_wrap p-3">
                    <div class="w60 mt-3">
                        <BillingMethodsSection ReadOnly="@(BuildBillingData!=null)" ReadData="OnReadBillingData" BuildData="BuildBillingData" />
                     </div>
                     <div class="w40 mt-3">
                         <CardsMethodsSection 
                             BuildData="BuildCreditCardData"
                             SelectedActiveCard="OnSelectedActiveCard"
                             EditCard="OnSubmitUpdateCard" 
                             CreateCard="OnSubmitCreateCard"
                             DeleteCard="OnSubmitDeleteCard" />
                    </div>
            </MudPaper>
        </MudStep>
            <MudStep Style="height:100%" CompletedStepColor="@AppColors.BASE_COLOR_ENUM" Title="Step 3">
                <MudButton Class="@(@AppTextStyle.TEXT_TRANSFORM_NORMAL+" m-5")" Variant="Variant.Filled"
                       Size="Size.Large" OnClick="Payment" Color="@AppColors.BASE_COLOR_ENUM">@GetTranslation("ContinueToPayment")</MudButton>
             </MudStep>
        </div>
    </MudStepper>
</MudPaper>



@* <MudLayout Class="w-100">

    <div class="mt-4 container_flex_column justify-content-center align-items-center p-2" >


        <MudDivider Class="my-4" />
      
        <UpgradePlan BuildData="@BuildPlanData" SubmitConfirm="OnSubmitConfirmPlan" SubmitUpgrade="OnSubmitUpgradePlan" SubmitCancel="OnSubmitCancelPlan" />
        
        <MudDivider Class="my-4" />
        @if (isConfirm)
        {
            <MudPaper Elevation="1" Class="w-100 container_flex_wrap">
             
                    <div class="w60 mt-3">
                        <BillingMethodsSection ReadOnly="@(BuildBillingData!=null)" ReadData="OnReadBillingData" BuildData="BuildBillingData" />
                     </div>

                 <div class="w40 mt-3">
                    <PaymentMethodsSection SelectedCard="OnSelectedCardData" BuildData="BuildCreditCardData"  EditCard="OnEditCard" CreateCard="OnCreateCard" />
                </div>
                @* </div> *@
  @*               <MudButton Class="@(@AppTextStyle.TEXT_TRANSFORM_NORMAL+" m-5")" Variant="Variant.Filled"
                           Size="Size.Large" OnClick="Payment" Color="@AppColors.BASE_COLOR_ENUM">@GetTranslation("ContinueToPayment")</MudButton>
            </MudPaper>
        }
    </div>
  
</MudLayout> *@ 

@code 

{


    private bool? _step1Complete;
    private string _step2TextInput;

    [Parameter] public EventCallback<CardDetails> SubmitSelectedActiveCard { get; set; }
    [Parameter] public EventCallback<CardDetails> SubmitCreateCard { get; set; }
    [Parameter] public EventCallback<CardDetails> SubmitUpdateCard { get; set; }
    [Parameter] public EventCallback<CardDetails> SubmitDeleteCard { get; set; }


    [Parameter] public EventCallback<SubscriptionPlanInfo> SubmitPayment { get; set; }


    [Parameter] public SubscriptionPlanInfo? BuildPlanData { get; set; } = null;
    [Parameter] public DataBuildBillingBase? BuildBillingData { get; set; } = null;
    [Parameter] public List<CardDetails>? BuildCreditCardData { get; set; } = null;
    [Parameter] public string planId { get; set; }

    private DataBuildBillingBase billing { get; set; }


    private CardDetails card { get; set; }
    private bool isConfirm = true;

    private string CurrentLanguage { get; set; } = "ar";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CurrentLanguage = await _manageLanguageService.GetLanguageAsync();
            StateHasChanged();
        }
    }
        private async void OnSelectedActiveCard(CardDetails data)
    {
        if (SubmitSelectedActiveCard.HasDelegate)
        {
            card = data;
            StateHasChanged();
            await SubmitSelectedActiveCard.InvokeAsync(data);
        }
    }

    private async Task OnSubmitCreateCard(CardDetails data)
    {
        if (SubmitCreateCard.HasDelegate)
        {
            await SubmitCreateCard.InvokeAsync(data);
        }
    }
    private async Task OnSubmitUpdateCard(CardDetails data)
    {
        if (SubmitUpdateCard.HasDelegate)
        {
            await SubmitUpdateCard.InvokeAsync(data);
        }
    }
    private async Task OnSubmitDeleteCard(CardDetails data)
    {
        if (SubmitDeleteCard.HasDelegate)
        {
            await SubmitDeleteCard.InvokeAsync(data);
        }
    }

    private async Task OnSubmitConfirmPlan(SubscriptionPlanInfo input)
    {
        if (input != null)
        {
            isConfirm = true;
            Payment();
            @*   StateHasChanged(); *@
        }
    }
    private async Task OnSubmitCancelPlan(SubscriptionPlanInfo input)
    {
        if ( input != null)
        {

        }
    }
    private async Task OnSubmitUpgradePlan(SubscriptionPlanInfo input)
    {
        if (input != null)
        {

        }
    }

    private void OnReadBillingData(DataBuildBillingBase? data)
    {
        if (data != null && !string.IsNullOrEmpty(data.FullName))
        {
            billing = data;
            StateHasChanged();
        }

    }
    private async Task OnPreviewInteraction(StepperInteractionEventArgs arg)
    {
        if (arg.Action == StepAction.Complete)
        {
            // occurrs when clicking next
            await ControlStepCompletion(arg);
        }
        else if (arg.Action == StepAction.Activate)
        {
            // occurrs when clicking a step header with the mouse
            await ControlStepNavigation(arg);
        }

    }
    private async Task ControlStepCompletion(StepperInteractionEventArgs arg)
    {
        switch (arg.StepIndex)
        {
            case 0:
                if (isConfirm != true)
                {
                    await DialogService.ShowMessageBox("Error", "You have not flipped the switch in step 1");
                    arg.Cancel = true;
                }
                break;
            case 1:
                if (!isConfirm)
                {
                    await DialogService.ShowMessageBox("Error", "You have not entered text in step 2");
                    arg.Cancel = true;
                }
                break;
        }
    }
    private async Task ControlStepNavigation(StepperInteractionEventArgs arg)
    {
        switch (arg.StepIndex)
        {
            case 1:
                if (_step1Complete != true)
                {
                    await DialogService.ShowMessageBox("Error", "Finish step 1 first");
                    arg.Cancel = true;
                }
                break;
            case 2:
                if (_step1Complete != true || (_step2TextInput?.Length ?? 0) == 0)
                {
                    await DialogService.ShowMessageBox("Error", "Finish step 1 and 2 first");
                    arg.Cancel = true;
                }
                break;
        }
    }
    public async void Payment()
    {
        if (SubmitPayment.HasDelegate)// && billing!=null && card!=null)
        {
            await SubmitPayment.InvokeAsync(BuildPlanData);
        }
   

        @* Snackbar.Add(BuildPlanData.TotalPrice.ToString(), Severity.Error); *@
    }

    private List<SubscriptionPlanInfo> planInfos;
    private string GetTranslation(string key)
    {
        return CurrentLanguage == "ar"
            ? TransAr.GetValueOrDefault(key, key)
            : TransEn.GetValueOrDefault(key, key);
    }

    private Dictionary<string, string> TransEn = new Dictionary<string, string>()
    {
        { "ContinueToPayment", "Continue to Payment" },
  

    };

    private Dictionary<string, string> TransAr = new Dictionary<string, string>()
    {
        { "ContinueToPayment", "متابعة الدفع" },
  

    };
 
}
