
@using LAHJA.Data.UI.Components
@using LAHJA.Data.UI.Components.Payment.CreditCard
@using LAHJA.Data.UI.Templates.CreditCard
@using LAHJA.UI.Components.ProFile.Settings
@using LAHJA.UI.Components.ServiceCard
@using LAHJA.UI.Components.TabelCard
@using Microsoft.AspNetCore.Authorization

@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject LAHJA.Data.UI.Templates.CreditCard.TemplateCreditCard Template

@attribute [Authorize]


@if (Template != null)
{
 

    <CreditCards BuildData="buildData"
                    SubmitSelectedActiveCard="onSubmitActiveCreditCard"
                    SubmitCreateCard="OnSubmitCreateCard"
                    SubmitUpdateCard="OnSubmitUpdateCard"
                    SubmitDeleteCard="OnSubmitDeleteCard" />


    
}


@code {


    private string lg = "ar";


    private List<CardDetails>? buildData { get; set; }

    // [Parameter] public string subscriptionId { set; get; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            var creditsResult = await Template.GetCreditCardDetails();

            if (creditsResult.Succeeded && creditsResult.Data != null && creditsResult.Data.Count()>0)
            {
                buildData = creditsResult.Data;
            }
        }

        // StateHasChanged();
    }



    private async Task onSubmitActiveCreditCard(CardDetails card)
    {
        if (Template.BuilderComponents.SubmitActiveCreditCard != null && card != null)
            await Template.BuilderComponents.SubmitActiveCreditCard(new DataBuildCreditCardBase { CreditCard = card });
    }


    private async Task OnSubmitCreateCard(CardDetails data)
    {
        if (Template.BuilderComponents.SubmitCreateCreditCardDetails != null)
        {
            await Template.BuilderComponents.SubmitCreateCreditCardDetails(new DataBuildCreditCardBase { CreditCard = data });
        }
    }
    private async Task OnSubmitUpdateCard(CardDetails data)
    {
        if (Template.BuilderComponents.SubmitUpdateCreditCardDetails != null)
        {
            await Template.BuilderComponents.SubmitUpdateCreditCardDetails(new DataBuildCreditCardBase { CreditCard = data });
        }
    }
    private async Task OnSubmitDeleteCard(CardDetails data)
    {
        if (Template.BuilderComponents.SubmitDeleteCreditCardDetails != null)
        {
            await Template.BuilderComponents.SubmitDeleteCreditCardDetails(new DataBuildCreditCardBase { CreditCard = data });
        }
    }





}
