@page "/dashboard/{*Url}"

@using LAHAJ.Loading
@using LAHJA.UI.Components.ProFile
@using LAHJA.UI.Components.ProFile.Settings
@using LAHJA.UI.Components.ProFile.USettings
@using MudBlazor
@using Domain.ShareData
@using LAHJA.Data.UI.Components.ProFileModel
@using LAHJA.Helpers.Services
@using LAHJA.UI.Components.ProFile.Cards

@using LAHJA.UI.Templates.Subscription
@using global::Shared.Constants.Router
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@inherits BaseInitializationComponent
@inject NavigationManager NavigationManager
@inject LanguageService languageService
@inject AuthService AuthService
@inject IManageLanguageService _manageLanguageService
  
@inject LAHJA.Data.UI.Templates.Profile.TemplateProfile Template



@* <ResendConfirmationemail />   *@

    @if(DataBuild!=null)
    {
        <div style="" class="cont-plan-RenderComponent">
            <div class="plan-RenderComponent-nav">

                <MudContainer Class="w-100" >
                    <MudContainer Class="pt-1 border px-3 border-gray-100 rounded-xl bg-gradient-to-l  p-0" style="background-color:none!important">
                    <UserAvaterCard Name="@(data.DisplayName??data.FirstName)"  ImageUrl="@data.Image" />
                        <MudDivider Class="my-3 py-1" />
                        <MudList T="string" >
                            @foreach (var item in NavItems)
                            {
                                <MudNavLink style="padding:0% !important; margin:0px !important" Icon="@item.Icon"  Href="@item.Url" Match="NavLinkMatch.All" OnClick="() => SetActiveTab(item.Url)">
                                        <MudText Typo="Typo.body2">@item.Label</MudText>
                                        @if (!string.IsNullOrEmpty(item.Badge))
                                        {
                                            <MudText Typo="Typo.caption" Class="ml-auto mr-1.5 rounded text-xs font-semibold leading-tight bg-blue-500/10 text-blue-700 dark:text-blue-200">@item.Badge</MudText>
                                        }
                                </MudNavLink>
                            }
                        </MudList>
                    </MudContainer>

                    <MudContainer Class="mt-3 flex items-center gap-2 text-sm text-gray-400">
                        Upgrade to
                        <MudLink Href="/dashboard/billing/subscription#subscribe" Class="flex items-center">
                            <MudIcon Icon="mdi-crown" Class="mr-1" />
                            Pro
                        </MudLink>
                </MudContainer>
               </MudContainer>
            </div>
            <div class="nav-menu-continer-items-sm w-100">
            
            <div class="d-flex flex-row justify-content-start align-items-start w-100" style="position:fixed;z-index:200; justify-content:end !important;">
                <MudCard Class="p-2 d-flex flex-row justify-center align-items-center" Style="width:50px;height:50px;border-radius:0px 0px 15px 0px">
                    <MudIconButton Class="m-1" Color="@AppColors.BASE_COLOR_ENUM" Size="Size.Medium" Icon="@Icons.Material.Filled.Menu" OnClick="ToggleMenu" />
                </MudCard>
            </div>

                 <MudMainContent Class="nav-profile-menu-continer-items-sm w-100 ">
                    <MudDrawer @bind-Open="@_open" Fixed="true" Elevation="0" Class="h-100" Anchor="Anchor.End" Variant="@DrawerVariant.Temporary">
                        <MudNavMenu Class="font-size-nav-v2" >
                        <UserAvaterCard Name="@(data.DisplayName??data.FirstName)"  ImageUrl="@data.Image" />
                            <MudDivider Class="my-3 py-1" />
                            @foreach (var item in NavItems)
                            {
                                <MudNavLink Icon="@item.Icon" Match="NavLinkMatch.All"  OnClick="() => SetActiveTab(item.Url)">
                                    <MudText Typo="Typo.body2">@item.Label</MudText>
                                    @if (!string.IsNullOrEmpty(item.Badge))
                                    {
                                        <MudText Typo="Typo.caption" Class="ml-auto mr-1.5 rounded text-xs font-semibold leading-tight bg-blue-500/10 text-blue-700 dark:text-blue-200">@item.Badge</MudText>
                                    }
                                </MudNavLink>

                            }
                        </MudNavMenu>
                        <MudDivider Class="my-3 py-1" />
                        @* <MudContainer Class="mt-3 flex items-center gap-2 text-sm text-gray-400">
                            Upgrade to
                            <MudLink Href="/dashboard/billing/subscription#subscribe" Class="flex items-center">
                                <MudIcon Icon="mdi-crown" Class="mr-1" />
                                Pro
                            </MudLink>
                        </MudContainer> *@
                    </MudDrawer>
                </MudMainContent>
            </div>
            <div class="plan-RenderComponent" >
            
                        @if (!string.IsNullOrEmpty(Url))
                        {
                            @RenderComponentBasedOnUrl
                        }
                        else
                        {
                             <Statistics  />
                        }
            </div>
            <div style="height:50px"></div>
        </div>
    }
    else
    {
        <h1>Error the element !!</h1>   
    }



@code
{

    private bool _open = false;
    [Parameter] public string Url { get; set; } = "profile";
    [Parameter] public string Filter { get; set; } = "profile";

    [Parameter] public DataBuildUserProfile DataBuild { get => data;
        set {

            if (value != null)
            {
                data = value;
                StateHasChanged();
            }


        } }

    private static string lg = "ar";

    private DataBuildUserProfile data = new DataBuildUserProfile();
    private void ToggleMenu()
    {
        _open = !_open;
        StateHasChanged();
    }
    protected override void OnInitialized()
    {

        ChangeLanguage(lg);

    }

    protected override async void OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            lg = await _manageLanguageService.GetLanguageAsync();
            var result = await Template.GetProfileUserAsync();

            if (result.Succeeded)
            {
                data = result.Data;
              StateHasChanged();
            }
           
        }


    }

    private static string GetLabel(string key)
    {
        return Translations[lg].ContainsKey(key) ? Translations[lg][key] : key;
    }

    private List<NavItem> NavItems;

    private void ChangeLanguage(string language)
    {
        lg = language;
        NavItems=  new()
        {
            new NavItem { Label = GetLabel("Statistics"), Url = "dashboard/Statistics" ,Icon=@Icons.Material.Filled.QueryStats},
            new NavItem { Label = GetLabel("Profile"), Url = "dashboard/profile",Icon=@Icons.Material.Filled.ManageAccounts },
            new NavItem { Label = GetLabel("Subscriptions"), Url = "dashboard/SubscriptionTemplate",Icon=@Icons.Material.Filled.Subscriptions },
            new NavItem { Label = GetLabel("Spaces"), Url = "dashboard/spaces",Icon=@Icons.Material.Filled.SpaceDashboard },
            new NavItem { Label = GetLabel("models"), Url = "dashboard/models" ,Icon=@Icons.Material.Filled.ModelTraining},
            new NavItem { Label = GetLabel("CreditCards"), Url = "dashboard/CreditCards",Icon=@Icons.Material.Filled.CreditCard },
            new NavItem { Label = GetLabel("Billing"), Url = "dashboard/billing",Icon=@Icons.Material.Filled.Cached },
            new NavItem { Label = GetLabel("Access Tokens"), Url = "dashboard/AccessTokens",Icon=@Icons.Material.Filled.Token },
            new NavItem { Label = GetLabel("Authentication"), Url = "dashboard/authentication",Icon=@Icons.Material.Filled.PrivacyTip, },

          //  new NavItem { Label = GetLabel("SSH and GPG Keys"), Url = "dashboard/keys" },
            new NavItem { Label = GetLabel("Webhooks"), Url = "dashboard/webhooks",Icon=@Icons.Material.Filled.Webhook, },
           // new NavItem { Label = GetLabel("Papers"), Url = "dashboard/papers" },
            new NavItem { Label = GetLabel("Notifications"), Url = "dashboard/notifications",Icon=@Icons.Material.Filled.Notifications },
            //new NavItem { Label = GetLabel("Local Apps and"), Url = "dashboard/local-apps", Badge = "NEW" },
           // new NavItem { Label = GetLabel("Gated Repositories"), Url = "dashboard/gated-repos" },

            // new NavItem { Label = GetLabel("Account"), Url = "dashboard/Account" ,Icon=@Icons.Material.Filled.ManageAccounts},

           // new NavItem { Label = GetLabel("Connected Apps"), Url = "dashboard/applications" },
            new NavItem { Label = GetLabel("Theme"), Url = "dashboard/theme" }
        };

        StateHasChanged();

    }

    public void SetActiveTab(string url)
    {
        _open = !_open;
        Url = url;
        NavigationManager.NavigateTo(url);

    }

    private RenderFragment RenderComponentBasedOnUrl => builder =>
    {
        if (builder == null)
        {
            throw new ArgumentNullException(nameof(builder));
        }

        if (string.IsNullOrEmpty(Url))
        {
            Url = "Statistics";
        }

        var componentMap = new Dictionary<string, Type>
                        {
                { "Statistics", typeof(Statistics) },
                { "profile", typeof(Profile) },
                { "Account", typeof(AccountTemplate) },
                { "SubscriptionTemplate", typeof(TemplateSubscriptions) },
                { "CreditCards", typeof(TemplateCreditCards) },
                { "billing", typeof(BillingSection) },
                { "authentication", typeof(AuthenticationTemplate) },
                { "models", typeof(TemplateModels) },
                { "AccessTokens", typeof(TemplateAccessToken) },
                { "spaces", typeof(TemplateSpaces) },
                { "keys/addtype=ssh", typeof(KeysAddaSSHkey) },
                { "keys/addtype=pgp", typeof(Keysaddapgpp) },
                { "webhooks", typeof(WebhooksTemplate) },
                { "webhooks/new", typeof(Newwebhook) },
                { "papers", typeof(PapersTemplate) },
                { "notifications", typeof(NotificationsTemplate) },
                { "local-apps", typeof(LocalAppsTemplate) },
                { "gated-repos", typeof(GatedRepositoriesTemplate) },
                { "content-preferences", typeof(ContentPreferencesTemplate) },
                { "applications", typeof(ConnectedAppsTemplate) },
                { "applications/new", typeof(NewCreateanOAuthapp) },
                { "theme", typeof(ThemeTemplate) }
              };


        if (componentMap.TryGetValue(Url, out var componentType))
        {
            builder.OpenComponent(0, componentType);
            if (!string.IsNullOrEmpty(Url) && !string.IsNullOrEmpty(data?.SubscriptionId) 
            && (Url == "spaces" || Url == "models" ))
            {
                builder.AddAttribute(1, "subscriptionId", data?.Subscription?.Id);
            }
               
            builder.CloseComponent();
        }
        else
        {
            builder.OpenComponent(0, typeof(Statistics));
            builder.CloseComponent();
        }
    };

    private class NavItem
    {
        public string Label { get; set; }
        public string Url { get; set; }
        public string Badge { get; set; }
        public string Icon { get; set; } = @Icons.Material.Filled.Check;
    }

    private static Dictionary<string, Dictionary<string, string>> Translations = new()
        {
            ["en"] = new()
            {
                ["Statistics"] = "Statistics",
                ["Profile"] = "Profile",
                ["Spaces"] = "Spaces",

                ["CreditCards"] = "Credit Cards",
                ["Account"] = "Account",
                ["Subscriptions"] = "Subscriptions",
                ["Authentication"] = "Authentication",
                ["models"] = "Models",
                ["Billing"] = "Billing",
                ["Access Tokens"] = "Access Tokens",
                ["SSH and GPG Keys"] = "SSH and GPG Keys",
                ["Webhooks"] = "Webhooks",
                ["Papers"] = "Papers",
                ["Notifications"] = "Notifications",
                ["Local Apps and"] = "Local Apps and",
                ["Gated Repositories"] = "Gated Repositories",

                ["Connected Apps"] = "Connected Apps",
                ["Theme"] = "Theme"
            },
            ["ar"] = new()
            {
                ["Statistics"] = "الاحصائيات",
                ["Profile"] = "الملف الشخصي",
                ["Spaces"] = "المساحات",
                ["CreditCards"] = "بطاقات الائتمان",

                ["Account"] = "الحساب",
                ["Subscriptions"] = "الاشتراكات",
                ["Authentication"] = "التحقق",
                ["models"] = "النماذج",
                ["Billing"] = "الفوترة",
                ["Access Tokens"] = "رموز الوصول",
                ["SSH and GPG Keys"] = "مفاتيح SSH و GPG",
                ["Webhooks"] = "Webhooks",
                ["Papers"] = "الأوراق",
                ["Notifications"] = "الإشعارات",
                ["Local Apps and"] = "التطبيقات المحلية و",
                ["Gated Repositories"] = "المستودعات المحمية",

                ["Connected Apps"] = "التطبيقات المتصلة",
                ["Theme"] = "السمة"
            }
        };

}
