@using System.Threading
@using Domain.ShareData
@using LAHJA.Data.UI.Components.ServiceCard
@using LAHJA.UI.Components.Icon

@using LAHJA.Data.UI.Models.ModelAi
@using LAHJA.Pages.FeatureServices
@using LAHJA.Them
@using LAHJA.UI.Components.FeatureServices
@using LAHJA.Helpers.Services
@using LAHJA.UI.Components.ModelAI

@inject ISnackbar Snackbar
@inject IDialogService  DialogService
@inject NavigationManager Navigation;
 
@page "/ModelServiceVitsd"
@page "/ModelServiceVitsd/{TypeMode}"

@inject LanguageService languageService
@inject IManageLanguageService _manageLanguageService



<style>

.mud-nav-group
{
    margin-bottom: 10px; 
}

    .small-font {
        font-size: 12px!important;
    }

    .custom-stack
    {
    gap: 8px;
   
         
    }

 

.mud-nav-group .mud-checkbox {
    margin: 2px 0;  
}

.mud-button {
    font-size: 12px !important;
}

.mud-select-item {
    font-size: 12px;
}

    .border_1{
    border-radius: 12px !important;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1) !important;
    margin: 20px auto;
    overflow: hidden !important;
    direction: rtl;
         max-width: 29% !important;
     margin-right: -1% !important; 
    }

    
    .cd-ClassMaxwith{
       max-width:100% !important
     }
</style>

<CardShowExperience  ElevationBX=0 IsShowImage="false" ClassMaxwith="cd-ClassMaxwith" BK="bg-dark" Translations="TranslationsLST" />

<MudContainer MaxWidth="MaxWidth.ExtraLarge"  Style="padding:4%" >


    

    <MudGrid Justify="Justify.SpaceBetween"  >
      <MudItem xs="12" md="4" Style=" padding:2% "   Class="filterServiceDesktop border_1 ">

            <br/> 
            <CardShowExperience IsShowImage="true" ClassMaxwith="cd-ClassMaxwith" BK="bg-dark" Translations="TranslationsLST" />
            <br/>
            <StartStepLahjaModel TypeLanguage="@TypeLanguage" />


        </MudItem>

 @*        <div>
        @if (_dataBuildModelSettings!=null){
            <MudItem xs="12" md="4" Style=" padding:2% "   Class="filterServiceDesktop border_1 ">
                <MudTextField @bind-Value="searchString1" Placeholder="Search" Variant="Variant.Text" AdornmentIcon="@Icons.Material.Filled.Search" Adornment="Adornment.Start" Class="mt-0" IconSize="Size.Small"></MudTextField>

                <MudStack Spacing="2" Row=true Class="custom-stack" >

                    <MudSelect @bind-Value="@selectedType" Variant="Variant.Outlined" Label="@(TypeLanguage ? "Type" : "«·‰Ê⁄ ")" Dense="true" Style="width:100px; font-size:10px;">
                        @foreach (var property in _dataBuildModelSettings.Type)
                        {
                            <MudSelectItem Value="@property" Style="font-size:10px;">

                                <p style="font-size:small">@property</p>

                            </MudSelectItem>
                       
                        }
                       
                    
                    </MudSelect>
                    <MudSelect @bind-Value="@selectedLanguage" Variant="Variant.Outlined" Label="@(TypeLanguage ? "Language" : "«··€… ")" Dense="true" Style="width:100px; font-size:10px;">
                        @foreach (var property in _dataBuildModelSettings.Language)
                        {
                            <MudSelectItem Value="@property" Style="font-size:12px;">
                                <p style="font-size:small">@property</p>
                            </MudSelectItem>
                       
                        }
                    </MudSelect>
                    <MudSelect @bind-Value="@selectedDialect" Variant="Variant.Outlined" Label="@(TypeLanguage ? "Dialect" : "«··ÂÃ… ")" Dense="true" Style="width:100px; font-size:10px;">
                        @foreach (var property in _dataBuildModelSettings.Dialect)
                        {
                            <MudSelectItem Value="@property" Style="font-size:12px;">
                                <p style="font-size:small">@property</p>
                            </MudSelectItem>
                       
                        }
                    </MudSelect>
                </MudStack>
                <MudDivider Class="my-6" />
                <MudStack Spacing="2"  Class="custom-stack" Style="padding-top:5px!important" >

                        <MudNavGroup Title="@(TypeLanguage ? "Voice" : "«·’Ê  ")" @bind-Value="@selectedVoice" Class="mud-nav-group small-font" Expanded="true">
                            @foreach (var property in _dataBuildModelSettings.Voice)
                            {
                                <MudCheckBox T="string"
                                             Color="@AppColors.BASE_COLOR_ENUM" Value="@property">
                                <p style="font-size:small">@property</p>
                            </MudCheckBox>
                            }
                        </MudNavGroup>
                        <MudNavGroup Title="@(TypeLanguage ? "Quality" : "«·ÃÊœ… ")" @bind-Value="@selectedQuality" Class="mud-nav-group small-font" Expanded="true">
                            @foreach (var property in _dataBuildModelSettings.Quality)
                            {
                                <MudCheckBox T="string" Value="@property"
                                             Color="@AppColors.BASE_COLOR_ENUM">
                                <p style="font-size:small">@property</p>

                                </MudCheckBox>
                            }
                        </MudNavGroup>
                        <MudNavGroup Title="@(TypeLanguage ? "Speed" : "«·”—⁄… ")" @bind-Value="@selectedSpeed" Class="mud-nav-group small-font" Expanded="true">
                            @foreach (var property in _dataBuildModelSettings.Speed)
                            {
                                <MudCheckBox T="string"
                                             Color="@AppColors.BASE_COLOR_ENUM" Value="@property">
                                <p style="font-size:small">@property</p>

                                </MudCheckBox>
                            }
                        </MudNavGroup>
                        <MudButton OnClick="ApplyFilter"
                                   Variant="Variant.Outlined"
                                   Color="@AppColors.BASE_COLOR_ENUM"
                                   Style="font-size:12px;" Dense="true" FullWidth="true">
                            @(TypeLanguage ? "Apply Filter" : " ÿ»Ìﬁ")
                        </MudButton>
                </MudStack>
            </MudItem>
        }
        </div> *@
        <MudItem  xs="12" md="8" Style="  padding:2%">

            <MudTextField @bind-Value="searchString1" Placeholder="Search" Variant="Variant.Text" AdornmentIcon="@Icons.Material.Filled.Search" Adornment="Adornment.Start" Class="mt-0" IconSize="Size.Small"></MudTextField>

           
           <MudList T="string"   Dense="true" Class="d-flex flex-grow-1 py-0  " Style="font-size:10px!important ;overflow: hidden !important;padding: 2%;">

@*                 <MudLink Href="#" Style="color:black!important ;padding:1%">  @(TypeLanguage ? "Home" : "«·—∆Ì”Ì…") </MudLink>
 *@                
 
             <MudChipSet T="string" SelectionMode="SelectionMode.MultiSelection">
                    @foreach (var category in Categories)
                    {
                        <MudChip Variant="Variant.Filled"
                                 Color="@(category == SelectedCategory ? Color.Dark : Color.Default)"
                                 OnClick="() => SelectCategory(category)">
                            @category
                        </MudChip>
                    }

                    <MudChipSet T="string" SelectionMode="SelectionMode.MultiSelection">
                        @foreach (var category in Categories2)
                        {
                            <MudChip Variant="Variant.Filled"
                                     Color="@(category == SelectedCategory ? Color.Dark : Color.Default)"
                                     OnClick="() => SelectCategory(category)">
                                @category
                            </MudChip>
                        }


                    </MudChipSet>
                </MudChipSet>
                 <MudSpacer />

               
                <MudButton Style="width:12% !important; height:50%;margin-top: 2%;"
                           Target="_blank"
                           Variant="Variant.Outlined"
                           Color="Color.Tertiary"
                           OnClick="OpenDialog">
                    @(TypeLanguage ? "Workout" : " Ã—Ì»")
                </MudButton>
           </MudList>
           <MudDivider Class="my-8" />
            @if (_dataBuildFilterModelsAi != null)
            {
                <MudTable T="ModelAiResponse" Items="@_dataBuildFilterModelsAi" @bind-SelectedItems="selectedItems"
                Dense="true" Hover=" true" Bordered="false" Striped="true" Filter="new Func<ModelAiResponse,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1" RowsPerPage="3"
                      Style="font-size:10px!important;text-align:right">
             
                <RowTemplate>
                    <MudCard Elevation="0">

                        <MudCardHeader>

                           @*  <CardHeaderAvatar>

                                <MudAvatar Size="Size.Small">
                                     <MudImage Src="@context.Image" Alt="An image of the best dog ever!"></MudImage>
                                </MudAvatar> 
                            </CardHeaderAvatar> *@

                            <CardHeaderContent>

                                      
                                    @* <MainModelCard DataBuild="@(new() {Name=context.Name ,ImageUrl ="", Category = @context.Category })" /> *@

                                    <MainModelCard DataBuild="@( new()
                                                   {
                                                       Name = context.Name,
                                                       ImageUrl = "/modelicon.webp",
                                                       LinkUrl = $"/model?NameService={context.Name}",
                                                       Category = @context.Category,
                                                       UpdatedAt = DateTime.UtcNow.AddDays(-4),
                                                       Downloads = 14200,
                                                       Likes = 662
                                                   })" />

                              @*   <MudText Typo="Typo.body2" Style="color:#000000;">@context.Name</MudText>
                                <MudText Typo="Typo.body2" Style="font-size: 12px !important;"  >@context.Category</MudText> *@ 
                                
                            </CardHeaderContent>

                            <CardHeaderActions>
                                <MudIconButton Color="Color.Default">
                                        <MudCheckBox @bind-Value="@context.IsSelected" Color="@AppColors.BASE_COLOR_ENUM"></MudCheckBox>

                                </MudIconButton>
                                <MudIconButton>
                                    @* <MudButton Style="font-size:8px!important" Color="@AppColors.BASE_COLOR_ENUM" Variant="Variant.Outlined" OnClick="OnclickCard">„ «»⁄Â </MudButton> *@
                                </MudIconButton>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>


                        </MudCardContent>

                    </MudCard>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
            }
           <MudButton Color="@AppColors.BASE_COLOR_ENUM" Class="filterServicesMobile"
                Variant="Variant.Filled"
                OnClick="ApplyFilter"
                Style="width: 100%; font-size:14px;">
                    @(TypeLanguage ? "Apply Filter" : " ÿ»Ìﬁ")
                 

                </MudButton>
           
           <MudDivider Class="my-4" />
        </MudItem>

    </MudGrid>

    
   
  </MudContainer>



@code
{
    private string _iconfill = "#fff";
    private bool _wheel;
    private bool _showHour = true;
    private bool _showMinute = true;
    private bool _showSecond = true;
    private bool _showMillisecond = false;
    private string _delimiter = ":";
    private Typo _typo = Typo.h6;
    private Color _color;
    private TimeSpan _value = new TimeSpan(0, 0, 0);
    private bool isMobile = false;
    private string selectedType;
    private string selectedFramework;
    private string selectedVoice;
    private string selectedLanguage;
    private string selectedDialect;
    private string selectedQuality;
    private string selectedAccuracy;
    private string selectedSpeed;

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private ModelAiResponse selectedItem1 = null;
    private HashSet<ModelAiResponse> selectedItems = new HashSet<ModelAiResponse>();
    private IEnumerable<ModelAiResponse> Elements = new List<ModelAiResponse>();
    private bool _selectOnRowClick = true;
    private bool _selectionChangeable = true;

    private int _currentPage = 1;
    private int _itemsPerPage = 3;
    private int _totalPages = 0;
    private string Title;
    private string searchQuery = string.Empty;
    private bool _open = false;
    private Dictionary<string, List<string>> propertyValues = null;
    private string selectedStore;
    private string selectedLibrary;
    private string selectedCommunity;
    private Color SelectedColor { get; set; } = Color.Default;
    private List<ModelAiResponse> _pagedData = new();
    private string value1;

    // private List<ModelProperties> _dataBuild = null;
    private ModelPropertyValues _dataBuildModelSettings =null;
    private List<ModelAiResponse> _dataBuildModelsAi = null;
    private List<ModelAiResponse> _dataBuildFilterModelsAi = null;

    private List<string> Categories = new() { "All", "Text-to-Video", "AI Model" };
   
    private List<string> Categories2 = new() { "Quality", "Speed", "Voice", "Quality", "Speed", "Voice" };

    private string SelectedCategory = "All";

    private void SelectCategory(string category)
    {
        SelectedCategory = category;
        StateHasChanged();
    }
    private static readonly Dictionary<string, Dictionary<string, string>> TranslationsLST = new()
    {
        ["en"] = new()
        {
            ["Text1"] = "Try the power",
            ["Text2"] = "AI Accent",
            ["Description"] = "LAHJA platform provides a smart way to communicate with AI in your own dialect.",
            ["ButtonLink"] = "Start your free trial"
        },
        ["ar"] = new()
        {
            ["Text1"] = "Ã—» ‰„«–Ã ",
            ["Text2"] = "·ÂÃ… AI",
            ["Description"] = " Ê›—  „‰’… ·ÂÃ…  ÿ—Ìﬁ… –ﬂÌ… ·· Ê«’· „⁄ «·–ﬂ«¡ «·«’ÿ‰«⁄Ì »·ÂÃ ﬂ «·Œ«’….",
            ["ButtonLink"] = "«· ﬂ«„· „⁄ «·‰„«–Ã "
        }
    };

    [Parameter] public Func<DataBuildModelAi, Task<List<ModelAiResponse>>> ApplyFilterByLanguageDialectType { get; set; }

    [Parameter] public string TypeMode { get; set; } = " ";

    [Parameter] public bool TypeLanguage { get; set; } = true;

    // [Parameter] public List<ModelProperties> DataBuild { get; set; } = null;
    [Parameter] public ModelPropertyValues DataBuildModelSettings { get => _dataBuildModelSettings; set => _dataBuildModelSettings=value; }
    [Parameter] public List<ModelAiResponse> DataBuildModelsAi { get => _dataBuildModelsAi; 
        set {

            if (value != null)
            {
                _dataBuildModelsAi = value;
                _dataBuildFilterModelsAi = value;
            }

        }
    }


    private void OpenDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var x = DataBuildModelsAi.Where((x => x.IsSelected == true)).ToList();
        var parameters = new DialogParameters<DialogContent>
        {

            // { x =>x.DataBuildModelsAi,_dataBuild },
            // {x => x.DataBuildCheck,x},
            {x=>x.SrcIframe,"https://modelspeech.onrender.com/t2speechmuit/?token=6776"}
        };
        DialogService.Show<DialogContent>("",parameters, options);
    }
    private async Task OpenFiterDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraExtraLarge, FullWidth = true };
        var parameters = new DialogParameters<DialogFilterMobile>
        {

            { x =>x.DataBuildModelsAi,_dataBuildModelsAi },
            { x =>x.DataBuildModelSettings,_dataBuildModelSettings },
            { x => x.TypeLanguage,TypeLanguage}
        };  
        var dialog = await  DialogService.ShowAsync<DialogFilterMobile>("", parameters, options);
        var result = await dialog.Result;
        // if (!result.Canceled)
        // {
        //     _dataBuildModelSettings = (ModelPropertyValues)result.Data;

        //         StateHasChanged();




        // }
    }
    private void LoadPageData(int page)
    {
        int skip = (page - 1) * _itemsPerPage;
        _pagedData = _dataBuildModelsAi.Skip(skip).Take(_itemsPerPage).ToList();

    }
    private void ToggleDrawer()
    {
        _open = !_open;
    }
    public  void OnclickCard()
    {

        try
        {
            string myString = "HelloWorld";
            Navigation.NavigateTo($"/model?NameService={myString}");
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }



    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            var currentLanguage = await _manageLanguageService.GetLanguageAsync();
            changeLanguage(currentLanguage);
        }
    }
    private async void changeLanguage(string language)
    {
        //  if (language == "en")
        //  {

        //      TypeLanguage = true;
        //      DataBuild = PropertyGenerator.GenerateModelPropertiesList(9, 0);
        //      propertyValues = PropertyGenerator.propertyValues;
        //      Title = "Services";
        //  }
        //  else
        //  {

        //      TypeLanguage = false;
        //      DataBuild = PropertyGenerator.GenerateModelPropertiesList(9, 1);
        //      propertyValues = PropertyGenerator.propertyValuesInArabic;
        //      Title = "«·Œœ„« ";
        //  }


        //  _dataBuild = DataBuild;
        //  _totalPages = (int)Math.Ceiling((double)DataBuild.Count / _itemsPerPage);
        //  LoadPageData(_currentPage);
        // await  InvokeAsync(StateHasChanged);

    }

    protected override void OnInitialized()
    {
        changeLanguage("ar");
        // if(_dataBuildModelsAi!=null)
        //     _dataBuildFilterModelsAi.AddRange(_dataBuildModelsAi.ToArray());

    }
    private DataBuildModelAi filter = new();
    private void clear()

    {

        selectedType = "";

        selectedFramework = "";

        selectedVoice = "";

        selectedLanguage = "";

        selectedDialect = "";

        selectedQuality = "";

        selectedAccuracy = "";

        selectedSpeed = "";

    }
    private async Task Submit()
    {



        try



        {







            Navigation.NavigateTo("/TextToText");





        }



        catch (Exception ex)
        {



            Snackbar.Add(ex.Message, Severity.Error);



        }



    }
    public void OnColorSelected(Color value)
    {

        SelectedColor = value;

    }
    private async void ApplyFilter()
    {






        if (!string.IsNullOrWhiteSpace(selectedType))
        {
            filter.Type = selectedType;
            // _dataBuildFilterModelsAi = _dataBuildModelsAi.Where((x => x.Type == selectedType)).ToList();
        }

        // if (!string.IsNullOrWhiteSpace(selectedFramework))
        // {
        //     _dataBuildFilterModelsAi = _dataBuildModelsAi.Where((x => x.Framework == selectedFramework)).ToList();
        // }


        if (!string.IsNullOrWhiteSpace(selectedVoice))
        {
            filter.Gender = selectedVoice;
            // _dataBuildFilterModelsAi = _dataBuildModelsAi.Where((x => x.Gender == selectedVoice)).ToList();
        }
     

        if (!string.IsNullOrWhiteSpace(selectedLanguage))
        {
            filter.Language = selectedLanguage;
            // _dataBuildFilterModelsAi = _dataBuildModelsAi.Where((x => x.Language == selectedLanguage)).ToList();
        }

        if (!string.IsNullOrWhiteSpace(selectedDialect))
        {
            filter.Dialect = selectedDialect;
            // _dataBuildFilterModelsAi = _dataBuildModelsAi.Where((x => x.Dialect == selectedDialect)).ToList();
        }

        if (ApplyFilterByLanguageDialectType != null)
        {
            _dataBuildFilterModelsAi = await ApplyFilterByLanguageDialectType(filter);

            if (!string.IsNullOrWhiteSpace(selectedVoice))
            {
                _dataBuildFilterModelsAi = _dataBuildFilterModelsAi.Where((x => x.Gender == selectedVoice)).ToList();
            }
        }


        // if (!string.IsNullOrWhiteSpace(selectedQuality))
        // {
        //     _dataBuildFilterModelsAi = _dataBuildModelsAi.Where((x => x. == selectedQuality)).ToList();
        // }

        // if (!string.IsNullOrWhiteSpace(selectedAccuracy))
        // {
        //     _dataBuildFilterModelsAi = _dataBuildModelsAi.Where((x => x.Accuracy == selectedAccuracy)).ToList();

        // }

        // if (!string.IsNullOrWhiteSpace(selectedSpeed))

        // {

        //     // Snackbar.Add(selectedType, Severity.Error);

        //     _dataBuildFilterModelsAi = _dataBuildModelsAi.Where((x => x.Speed == selectedSpeed)).ToList();



        // }

        clear();
        StateHasChanged();








        //     _totalPages = (int)Math.Ceiling((double)DataBuild.Count / _itemsPerPage);

        //     ToggleDrawer();













        //     LoadPageData(_currentPage);



        //     clear();

        //     StateHasChanged();





        // }

        // catch (Exception ex)



        // {

        //     Snackbar.Add(ex.Message, Severity.Error);

        // }



    }
 

    private bool FilterFunc1(ModelAiResponse element) => FilterFunc(element, searchString1);

    private bool FilterFunc(ModelAiResponse element, string searchString)
    {

        if (string.IsNullOrWhiteSpace(searchString))

            return true;

        // if (element.)

        //     return true;

        // if (element.Author.Contains(searchString, StringComparison.OrdinalIgnoreCase))

        //     return true;

        // if ($"{element.Dialect} {element.Language} {element.Framework}".Contains(searchString))

        //     return true;

        return false;

    }


}