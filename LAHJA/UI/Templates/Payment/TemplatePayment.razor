@page "/payment"
@page "/payment/{PlanId}"
@using LAHAJ.Loading
@using LAHJA.Data.UI.Components
@using LAHJA.Data.UI.Components.Payment.DataBuildBillingBase
@using LAHJA.Data.UI.Components.Payment.CreditCard
@using LAHJA.Data.UI.Components.Plan
@using LAHJA.Data.UI.Templates.CreditCard
@using LAHJA.Data.UI.Templates.Payment
@using LAHJA.Helpers.Services
@using LAHJA.UI.Components.Billing.Shared
@using LAHJA.UI.Components.Payment
@using Microsoft.AspNetCore.Authorization
@using System.Globalization
@using global::Shared.Constants.Router

@inject NavigationManager Navigation;
@inject LAHJA.Data.UI.Templates.Plans.TemplatePlans TemplatePlan
@inject LAHJA.Data.UI.Templates.Payment.TemplatePayment templatePayment
@inject LAHJA.Data.UI.Templates.Billing.TemplateBilling TemplateBilling
@inject LAHJA.Data.UI.Templates.CreditCard.TemplateCreditCard templateCreditCard


@attribute [Authorize]


@if (templatePayment != null && templateCreditCard!=null  )
{
        @if (isLoading)
        {

            <Loading IsLoading="isLoading" />

        } else
        {

            <PaymentComponts 
                BuildPlanData="buildPlanData" 
                BuildBillingData="buildBillingData" 
                SubmitPayment="onSubmitCheckout" 
                BuildCreditCardData="buildCreditCardData" 
                SubmitSelectedActiveCard="onSubmitActiveCreditCard"
                         SubmitCreateCard="OnSubmitCreateCard"
                         SubmitUpdateCard="OnSubmitUpdateCard"
                         SubmitDeleteCard="OnSubmitDeleteCard" />
        }
}


@code{

    [Parameter] public string PlanId { get; set; }

    private bool isLoading = true;
    private SubscriptionPlanInfo buildPlanData;
    private DataBuildBillingBase? buildBillingData;
    private List<CardDetails>? buildCreditCardData;

    private List<string> errors;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
                if (PlanId != null)
                {
                    await initializePlanAsync();
                    // await initializeBillingDetailsAsync();
                    // await initializeCreditCardDetailsAsync();
                }

                isLoading = false;
                StateHasChanged();
        
        }

     

    }
    private async Task initializePlanAsync()
    {
        if (PlanId != null)
        {
            var planResult = await TemplatePlan.GetSubmitSubscriptionPlan(new DataBuildPlansBase { PlanId = PlanId, Lg = CultureInfo.CurrentUICulture.Name });
            if (planResult.Succeeded)
            {
                buildPlanData = planResult.Data;
            }
            else
            {
                errors = planResult.Messages;

            }

            StateHasChanged();
        }
    }
    private async Task initializeBillingDetailsAsync()
    {


        var billingsResult = await TemplateBilling.GetBillingDetails();


        if (billingsResult.Succeeded)
        {
            buildBillingData = billingsResult.Data;
        }
        else
        {
            errors = billingsResult.Messages;
        }

        StateHasChanged();

    }
    private async Task initializeCreditCardDetailsAsync()
    {
        var creditsResult = await templateCreditCard.GetCreditCardDetails();

        if (creditsResult.Succeeded)
        {
            buildCreditCardData = creditsResult.Data;
        }
        else
        {
            errors = creditsResult.Messages;
        }

        StateHasChanged();
    }
    private async Task onSubmitCheckout(SubscriptionPlanInfo plan)
    {
        if (templatePayment.BuilderComponents.SubmitCheckout != null && plan!=null)
            await templatePayment.BuilderComponents.SubmitCheckout(new DataBuildPaymentBase { PlanId = plan.Id });
    }
    private async Task onSubmitActiveCreditCard(CardDetails card)
    {
        if (templateCreditCard.BuilderComponents.SubmitActiveCreditCard != null && card != null)
            await templateCreditCard.BuilderComponents.SubmitActiveCreditCard(new DataBuildCreditCardBase { CreditCard = card });
    }
    private async Task OnSubmitCreateCard(CardDetails data)
    {
        if (templateCreditCard.BuilderComponents.SubmitCreateCreditCardDetails!=null)
        {
            await templateCreditCard.BuilderComponents.SubmitCreateCreditCardDetails(new DataBuildCreditCardBase { CreditCard=data });
        }
    }
    private async Task OnSubmitUpdateCard(CardDetails data)
    {
        if (templateCreditCard.BuilderComponents.SubmitUpdateCreditCardDetails != null)
        {
            await templateCreditCard.BuilderComponents.SubmitUpdateCreditCardDetails(new DataBuildCreditCardBase { CreditCard = data });
        }
    }
    private async Task OnSubmitDeleteCard(CardDetails data)
    {
        if (templateCreditCard.BuilderComponents.SubmitDeleteCreditCardDetails != null)
        {
            await templateCreditCard.BuilderComponents.SubmitDeleteCreditCardDetails(new DataBuildCreditCardBase { CreditCard = data });
        }
    }
    private async Task CheckoutAsync()
    {

        var res = await templatePayment.CheckoutAsync(new DataBuildPaymentBase { PlanId = PlanId });

        if (res.Data != null)

            Navigation.NavigateTo(res.Data.Url ?? RouterPage.HOME);
    }

}

  