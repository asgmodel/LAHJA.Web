

@using LAHJA.Data.UI.Components.Base
@using LAHJA.Them
@using LAHJA.UI.Components.General.Button
@using LAHJA.UI.Components.General.InputField
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization

@attribute [AllowAnonymous]

@inherits CardAuth<DataBuildAuthBase>




<MudText Typo="Typo.h6">
    <h4 class="d-flex my-5 align-center justify-content-center flex-column"> Reset Password</h4>
</MudText>

<MudCard Class="w60 mx-auto my-3 p-6 rounded-lg shadow-lg text-center  dark:bg-gray-900  d-flex align-center justify-content-center flex-column">

  
        
                @if (isLoading)
                {
                    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
                }

                @if (!isLoading && errors != null)
                {
                    @foreach (var messsage in errors)
                    {
                          <MudAlert Severity="Severity.Error">@messsage</MudAlert>
                    }
                }

 <MudForm Style="width:100% !important" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">

        <EmailField  Class="my-5" FullWidth Label="Email" Required="true"  @bind-Value="@email" />

        <MudTextField T="string" InputType="InputType.Hidden" @bind-Value="code" Required="true" Class="mt-4" />
    
                @* <MudTextField @bind-Value="password" Label="New Password" Type="password" Required="true" Class="mt-4" /> *@
                <MudTextField T="string" Label="Password" HelperText="Enter new password" @ref="pwField1"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Password is required!" @bind-Value="@password" />

            
                
        

                <MudCardActions Class="col-12 row mt-5 d-flex flex-wrap justify-content-between align-content-between">
@*             <MudButton Variant="Variant.Filled" Color="@AppColors.BASE_COLOR_ENUM" Class="col-lg-3 col-md-7 col-sm-12" OnClick="OnResetPassword" Disabled="isLoading">
                        Reset Password
                    </MudButton>
                    <MudButton OnClick="onCloseDialog" Class="col-lg-4 col-md-7 col-sm-12" Variant="Variant.Text" Color="Color.Secondary">Cancel</MudButton> *@

                      <div class="col-lg-4 col-md-7 col-sm-12">
                        <CustomButton Text="Reset Password" OnClick="OnResetPassword" IsProcessing="isLoading" />
            </div>
                        <div class="col-lg-4 col-md-7 col-sm-12">
                            <CancelButton OnClick="onCloseDialog"/>
                        </div>
                </MudCardActions>
      
   </MudForm>
          
        </MudCard>
@*     </DialogContent>
</MudDialog>
 *@
@code{

    [Parameter] public string Email { get => email; set => email=value; }

    [Parameter] public string Code { get=>code; set=>code=value; }

    protected override void OnInitialized()

    {

        if (!string.IsNullOrEmpty(Email))
        {

            email = Email;
        }

        if (!string.IsNullOrEmpty(Code))
        {
            code = Code;

        }


        StateHasChanged();

    }



    protected async Task OnResetPassword()
    {
        isLoading = true;
     
        if (OnSubmitResetPassword.HasDelegate && !string.IsNullOrEmpty(email) && !string.IsNullOrEmpty(code) && !string.IsNullOrEmpty(password))
        {
            await OnSubmitResetPassword.InvokeAsync(new DataBuildAuthBase{ Email=email,Password=password,Code=code});
        }
        await Task.Delay(6000);
        isLoading = false;
    
    }

}

@* 
<h3>ResendConfirmationEmail</h3>
<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudPaper Class="pa-4">
        @* <MudTypography Variant="H5" Align="Center">مرحباً بك في مكوّن MudBlazor</MudTypography> *@
        
     @*    <MudAlert Severity="Error" Style="display:@(ErrorMessage != null ? "block" : "none")">
            @ErrorMessage
        </MudAlert>

        <MudTextField @bind-Value="InputValue" Label="أدخل النص هنا" Placeholder="اكتب شيئًا..." Immediate="true" Adornment="Adornment.Start">
            <AdornmentIcon>text_fields</AdornmentIcon>
        </MudTextField>

        <MudButton Variant="Filled" Color="Primary" Class="mt-4" OnClick="ProcessInput">تنفيذ</MudButton>

        <MudSpacer />

        <MudList>
            @foreach (var result in Results)
            {
                <MudListItem>
                    <MudText>✅ @result</MudText>
                </MudListItem>
            }
        </MudList> *@
 @*    </MudPaper>
</MudContainer> *@

@code {
    // private string? InputValue;
    // private List<string> Results = new();
    // private string? ErrorMessage;

    // private async Task ProcessInput()
    // {
    //     try
    //     {
    //         ErrorMessage = null;

    //         if (string.IsNullOrWhiteSpace(InputValue))
    //         {
    //             throw new InvalidOperationException("الحقل لا يمكن أن يكون فارغاً.");
    //         }

    //         // Simulate processing input
    //         await Task.Delay(500);
    //         Results.Add($"تمت معالجة: {InputValue}");

    //         // Reset input
    //         InputValue = string.Empty;
    //     }
    //     catch (Exception ex)
    //     {
    //         ErrorMessage = ex.Message;
    //     }
    // }
}
 
