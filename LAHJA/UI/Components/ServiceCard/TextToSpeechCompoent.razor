 @using MudBlazor
 @using LAHJA.Data.UI.Components.ServiceCard
 @using Microsoft.AspNetCore.Components
  @using LAHJA.Them
 @inject IDialogService DialogService
  @inject NavigationManager Navigation
<MudCard Elevation="25" Class="rounded-lg pb-4 card-hover">
    @if (Param != null)
    {



        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">@Param.DataBuild.NameCompoent</MudText>
            </CardHeaderContent>
            <CardHeaderActions>

                <MudTooltip Text="@Param.DataBuild.TolTabText" Color="Color.Primary" Placement="Placement.Top">
                    <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" 
                    OnClick="OpenDialogAsyncS" />
                </MudTooltip>
            </CardHeaderActions>
        </MudCardHeader>


        <MudCardContent>

            <MudForm @ref="form" ValidationDelay="300" OnValidSubmit="Onsubmit" OnInvalidSubmit="Onsubmit">

                <MudTextField T="string"
                              Label="Text"
                              HelperText="Choose a Text"
                              InputType="InputType.Text"
                              Validation="@(new Func<string, IEnumerable<string>>(TextStrength))"
                              Required="true"
                              RequiredError="Text is required!"
                              @bind-Value="@textSpeech" />
                <MudSelect @bind-Value="SelectedDialect" Label="Select Dialect" FullWidth="true" Class="mb-3"
                           Required="true" RequiredError="Language is required!">
                    @foreach (var dialect in Param.DataBuild.AvailableLanguages)
                    {
                        <MudSelectItem Value="@dialect">@dialect</MudSelectItem>
                    }
                </MudSelect>


                <MudButton Disabled="@_processing" Color="@AppColors.BASE_COLOR_ENUM" FullWidth="true"
                           EndIcon="@Icons.Material.Filled.Send" Variant="Variant.Filled" Class="mb-3" OnClick="Onsubmit">

                    <audio id="OutputPlayerId"  controls></audio>
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Processing</MudText>
                    }
                    else
                    {

                        <MudText>Click me</MudText>
                    }
                </MudButton>
            </MudForm>


            @if (OnResult != null && OnResult.Sccess && OnResult.OperationType == "TextToSpeech")
            {

                <MudButton Color="@AppColors.BASE_COLOR_ENUM" FullWidth="true" Variant="Variant.Filled" Class="mb-3"
                           OnClick="OpenDialogAsync">Play Sound</MudButton>
                <MudButton Color="@AppColors.BASE_COLOR_ENUM" FullWidth="true" Variant="Variant.Filled"
                           EndIcon="@Icons.Material.Filled.ArrowDownward">Install</MudButton>
            }

        </MudCardContent>













    }
    else
    {


    }


</MudCard>











@code {

    private MudForm form;
 
    private bool _processing = false;
    [Parameter] public DataBuildServicePage DataBuild { get; set; }

    [Parameter] public TextToSpeechComponent? Param { get; set; } = null;
    [Parameter] public EventCallback<string> PlayTextToSpeech { get; set; }


    [Parameter] public EventCallback SaveAudio { get; set; }


    [Parameter] public string OnTextSpeech { get; set; } = "";



    [Parameter] public string? OnResultUrl { get; set; } = "";

    private string Textt;
    private bool flag = false;

    private string SelectedLanguage { get; set; }
    private string textSpeech = "";
    private string SelectedDialect = "";

    [Parameter] public EventCallback<OnDataResult> OnSubmit { get; set; }

    [Parameter] public OnDataResult? OnResult { get; set; } = null;


    private IEnumerable<string> TextStrength(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
            yield return "Text cannot be empty.";


        if (value.Length < 6)
            yield return "Password must be at least 8 characters long.";
        if (!value.Any(ch => "!@#$%^&*()".Contains(ch)))
            yield return "Password must include at least one special character (!@#$%^&*()).";
    }

    private async Task Onsubmit()

    {
        try
        {

            _processing = true;
            await Task.Delay(2000);
            _processing = false;

            if (OnSubmit.HasDelegate)
            {
                OnDataResult obj = new OnDataResult()
                    {
                        Text = textSpeech,
                        OperationType = "TextToSpeech",
                        Sccess = false,
                        SelectLanguage = SelectedDialect,
                        TypeSend = "Send"
                    };

                await OnSubmit.InvokeAsync(obj);


            }

            StateHasChanged();


        }

        catch (Exception ex)
        {

        }


    }

    private void testing()
    {
        Navigation.NavigateTo("/ServiceInforMationModel");
    }
    private Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<MudDialogPalySound>
        {
            { x => x.Url,"https://youtu.be/Ci6CGbe33TU?si=BDus0nN0tM6QVnFc"}


        };

        return DialogService.ShowAsync<MudDialogPalySound>("Simple Dialog", parameters, options);
    }

    private Task OpenDialogAsyncS()
    {

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium };

        return DialogService.ShowAsync<DialogUsageExample_Dialog>("Simple Dialog", options);
    }



}

